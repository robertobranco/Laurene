breed [ent-consumidoras consumidora]

globals[
conhec-cient
conhec-tecn
conhec-ambiente
aptidao
comparada?
]

to setup
  ;;limpar tudo
  clear-all
  ;;mudar a cor de fundo para branco (facilita a visualizaçao)
  ask patches [set pcolor white];

;;mudar a forma das entidades geradoras para circulo (diferenciaçao de outras entidades)
  set-default-shape ent-consumidoras "circle";
  ;;criar turtles do tipo entidades geradoras
  create-ent-consumidoras entidades-consumidoras
  [
    set size (recurso-inicial / 500)
    ;;mudar cor das entidades para azul
    set color blue
    ;;dispor as turtles em posiçoes aleatorias do ambiente
    setxy random-xcor random-ycor
    ;;define o conhecimento cientifico como uma lista contendo o numero de caracteres
    ;;dado como "quantidade de conhecimento indicada no slider/2"
    ;;o conhecimento informado no slider é a quantidade de conhecimento total
    ;;pela existencia dos dois tipos de conhecimento, divide-se pela metade
    ;;os numeros que preencherao essa lista sao 1 e 0, distribuidos aleatoriamente
    set conhec-cient n-values (conhecimento / 2)  [random 2]
    ;;o mesmo acontece com o conhecimento tecnologico
    set conhec-tecn n-values (conhecimento / 2) [random 2]
    ;let conhec-cons (sentence conhec-cient conhec-tecn)
    show conhec-tecn
  ]

    set conhec-ambiente n-values conhecimento [random 2]
    show conhec-ambiente
end

to compare
  ; assume que nenhuma entidade foi comparada ao mercado
  ask ent-consumidoras [set comparada? false]
  ; loop para comparar todas as entidades ao mercado
    ask ent-consumidoras with [not comparada?]
    [test]


end

to test
  ask ent-consumidoras [show comparada?]
  let cont 0
  set aptidao 0
  ;let aux-aptidao n-values (conhecimento / 2) [0]
foreach conhec-tecn[
      ifelse item (cont) conhec-tecn = item (cont) conhec-ambiente 
      [print "yep"]
      [print "nope"]
      ;set aux-aptidao replace-item (cont) aux-aptidao 1
      set cont cont + 1
      ]
set comparada? true
      show comparada?

    

end
